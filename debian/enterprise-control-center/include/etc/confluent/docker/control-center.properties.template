
{# required properties #}
bootstrap.servers={{env['CONTROL_CENTER_BOOTSTRAP_SERVERS']}}
zookeeper.connect={{env['CONTROL_CENTER_ZOOKEEPER_CONNECT']}}
confluent.monitoring.interceptor.topic.replication={{env.get('CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION', env['CONTROL_CENTER_REPLICATION_FACTOR'])}}
confluent.controlcenter.internal.topics.replication={{env.get('CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION', env['CONTROL_CENTER_REPLICATION_FACTOR'])}}
confluent.controlcenter.command.topic.replication={{env.get('CONTROL_CENTER_COMMAND_TOPIC_REPLICATION', env['CONTROL_CENTER_REPLICATION_FACTOR'])}}
confluent.metrics.topic.replication={{env.get('CONTROL_CENTER_METRICS_TOPIC_REPLICATION', env['CONTROL_CENTER_REPLICATION_FACTOR'])}}

{# optional properties #}
{% set other_props = {
    'CONTROL_CENTER_ID': 'confluent.controlcenter.id',
    'CONTROL_CENTER_NAME': 'confluent.controlcenter.name',
    'CONTROL_CENTER_DATA_DIR': 'confluent.controlcenter.data.dir',
    'CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC': 'confluent.monitoring.interceptor.topic',
    'CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS': 'confluent.monitoring.interceptor.topic.partitions',
    'CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_RETENTION_MS': 'confluent.monitoring.interceptor.topic.retention.ms',
    'CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS': 'confluent.controlcenter.internal.topics.partitions',
    'CONTROL_CENTER_INTERNAL_TOPICS_RETENTION_MS': 'confluent.controlcenter.internal.topics.retention.ms',
    'CONTROL_CENTER_INTERNAL_TOPICS_CHANGELOG_SEGEMENT_BYTES': 'confluent.controlcenter.internal.topics.changelog.segment.bytes',
    'CONTROL_CENTER_LICENSE': 'confluent.license',
    'CONTROL_CENTER_CONFLUENT_LICENSE': 'confluent.license',
    'CONFLUENT_METRICS_TOPIC_PARTITION': 'confluent.metrics.topic.partitions',
    'CONFLUENT_METRICS_TOPIC_REPLICATION': 'confluent.metrics.topic.replication',
} -%}

{% set excludes = other_props.keys() + ['CONTROL_CENTER_COMMAND_TOPIC_REPLICATION', 'CONTROL_CENTER_METRICS_TOPIC_REPLICATION'] -%}

{% for k, property in other_props.iteritems() -%}
{% if env.get(k) != None -%}
{{property}}={{env[k]}}
{% endif -%}
{% endfor -%}

{% set command_props = env_to_props('CONTROL_CENTER_COMMAND_', 'confluent.controlcenter.command.', exclude=excludes) -%}
{% for name, value in command_props.iteritems() -%}
{{name}}={{value}}
{% endfor -%}

{# NOTE: the env var prefix is CONTROL_CENTER_METRICS_ but the property prefix is confluent.metrics. #}
{% set metrics_props = env_to_props('CONTROL_CENTER_METRICS_', 'confluent.metrics.', exclude=excludes) -%}
{% for name, value in metrics_props.iteritems() -%}
{{name}}={{value}}
{% endfor -%}

{% set connect_props = env_to_props('CONTROL_CENTER_CONNECT_', 'confluent.controlcenter.connect.', exclude=excludes) -%}
{% for name, value in connect_props.iteritems() -%}
{{name}}={{value}}
{% endfor -%}

{% set streams_props = env_to_props('CONTROL_CENTER_STREAMS_', 'confluent.controlcenter.streams.', exclude=excludes) -%}
{% for name, value in streams_props.iteritems() -%}
{{name}}={{value}}
{% endfor -%}

{% set rest_props = env_to_props('CONTROL_CENTER_REST_', 'confluent.controlcenter.rest.', exclude=excludes) -%}
{% for name, value in rest_props.iteritems() -%}
{{name}}={{value}}
{% endfor -%}

{% set mail_props = env_to_props('CONTROL_CENTER_MAIL_', 'confluent.controlcenter.mail.', exclude=excludes) -%}
{% for name, value in mail_props.iteritems() -%}
{{name}}={{value}}
{% endfor -%}
