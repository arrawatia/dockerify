#!/usr/bin/env python

from __future__ import print_function

import os
import sys
import socket
import time
from contextlib import closing
import collections
import time
import json
import re
import requests
import subprocess


def wait_for_service(host, port, timeout):
    start = time.time()
    while True:
        try:
            s = socket.create_connection((host, int(port)), float(timeout))
            s.close()
            return True
        except socket.error:
            pass

        time.sleep(1)
        if time.time() - start > timeout:
            return False


def check_zookeeper_ready(connect_string, timeout):
    cmd_template = """
             java {jvm_opts} \
                 -jar /etc/confluent/docker/docker-utils.jar  \
                 zk-ready \
                 {connect_string} \
                 {timeout_in_ms}"""

    # This is to ensure that we include KAFKA_OPTS only if the jaas.conf has
    # entries for zookeeper. If you enable SASL, it is recommended that you
    # should enable it for all the components. This is an option if SASL
    # cannot be enabled on Zookeeper.
    jvm_opts = ""
    if (not os.environ.get("ZOOKEEPER_SASL_ENABLED") == "FALSE") and os.environ.get("KAFKA_OPTS"):
        jvm_opts = os.environ.get("KAFKA_OPTS")

    cmd = cmd_template.format(
        jvm_opts=jvm_opts or "",
        connect_string=connect_string,
        timeout_in_ms=timeout * 1000)

    exit_code = subprocess.call(cmd, shell=True)

    if exit_code == 0:
        return True
    else:
        return False


def check_kafka_ready(bootstrap_broker_list, client_properties, expected_brokers, timeout):
    cmd_template = """
             java {jvm_opts} \
                 -jar /etc/confluent/docker/docker-utils.jar  \
                 kafka-ready \
                 {bootstrap_broker_list} \
                 {client_properties} \
                 {expected_brokers} \
                 {timeout_in_ms}"""

    cmd = cmd_template.format(
        jvm_opts=os.environ.get("KAFKA_OPTS") or "",
        bootstrap_broker_list=bootstrap_broker_list,
        client_properties=client_properties,
        expected_brokers=expected_brokers,
        timeout_in_ms=timeout * 1000)

    exit_code = subprocess.call(cmd, shell=True)

    if exit_code == 0:
        return True
    else:
        return False


def check_schema_registry_ready(host, port, service_timeout):

    # Check if you can connect to the endpoint
    status = wait_for_service(host, port, service_timeout)

    if status:
        # Check if service is responding as expected to basic request
        url = "http://%s:%s/config" % (host, port)
        r = requests.get(url)
        # The call should always return the compatibilityLevel
        if r.status_code // 100 == 2 and 'compatibilityLevel' in str(r.text):
            return True
        else:
            print("Unexpected response with code: %s and content: %s" % (str(r.status_code), str(r.text)), file=sys.stderr)
            return False
    else:
        print("%s cannot be reached on port %s." % (str(host), str(port)), file=sys.stderr)
        return False


def check_kafka_rest_ready(host, port, service_timeout):

    # Check if you can connect to the endpoint
    status = wait_for_service(host, port, service_timeout)

    if status:

        # Check if service is responding as expected to basic request
        # Try to get topic list
        # NOTE: this will only test ZK <> REST Proxy interaction
        url = "http://%s:%s/topics" % (host, port)
        r = requests.get(url)
        if r.status_code // 100 == 2:
            return True
        else:
            print("Unexpected response with code: %s and content: %s" % (str(r.status_code), str(r.text)), file=sys.stderr)
            return False
    else:
        print("%s cannot be reached on port %s." % (str(host), str(port)), file=sys.stderr)
        return False


def get_kafka_listeners(advertised_listeners):
    host = re.compile(r'://(.*?):', re.UNICODE)
    return host.sub(r'://0.0.0.0:', advertised_listeners)


if __name__ == '__main__':

    import argparse
    root = argparse.ArgumentParser(description='Confluent Platform Utility Belt.')

    actions = root.add_subparsers(help='Actions', dest='action')

    zk = actions.add_parser('zk-ready', description='Check if ZK is ready.')
    zk.add_argument('connect_string', help='Zookeeper connect string.')
    zk.add_argument('timeout', help='Time in secs to wait for service to be ready.', type=int)

    kafka = actions.add_parser('kafka-ready', description='Check if Kafka is ready.')
    kafka.add_argument('bootstrap_broker_list', help='Zookeeper connect string.')
    kafka.add_argument('client_properties_path', help='Path to client properties.')
    kafka.add_argument('min_brokers', help='Minimum number of brokers to wait for', type=int)
    kafka.add_argument('timeout', help='Time in secs to wait for service to be ready.', type=int)

    sr = actions.add_parser('sr-ready', description='Check if Schema Registry is ready.')
    sr.add_argument('host', help='Hostname for Schema Registry.')
    sr.add_argument('port', help='Port for Schema Registry.')
    sr.add_argument('timeout', help='Time in secs to wait for service to be ready.', type=int)

    kr = actions.add_parser('kr-ready', description='Check if Kafka REST Proxy is ready.')
    kr.add_argument('host', help='Hostname for REST Proxy.')
    kr.add_argument('port', help='Port for REST Proxy.')
    kr.add_argument('timeout', help='Time in secs to wait for service to be ready.', type=int)

    config = actions.add_parser('listeners', description='Get listeners value from advertised.listeners. Replaces host to 0.0.0.0')
    config.add_argument('advertised_listeners', help='advertised.listeners string.')

    if len(sys.argv) < 2:
        root.print_help()
        sys.exit(1)

    args = root.parse_args()

    success = False

    if args.action == "zk-ready":
        success = check_zookeeper_ready(args.connect_string, int(args.timeout))
    elif args.action == "kafka-ready":
        success = check_kafka_ready(args.bootstrap_broker_list, args.client_properties_path, int(args.min_brokers), int(args.timeout))
    elif args.action == "sr-ready":
        success = check_schema_registry_ready(args.host, args.port, int(args.timeout))
    elif args.action == "kr-ready":
        success = check_kafka_rest_ready(args.host, args.port, int(args.timeout))
    elif args.action == "listeners":
        listeners = get_kafka_listeners(args.advertised_listeners)
        if listeners:
            print(listeners)
            success = True

    if success:
        sys.exit(0)
    else:
        sys.exit(1)
